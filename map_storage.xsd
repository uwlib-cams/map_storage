<?xml version="1.0" encoding="UTF-8"?>
<!-- are both targetNamespace and xmlns attrs needed? -->
<xs:schema targetNamespace="https://uwlib-cams.github.io/map_storage/"
    xmlns="https://uwlib-cams.github.io/map_storage/" 
    xmlns:uwsinopia="https://uwlib-cams.github.io/sinopia_maps/"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:vc="http://www.w3.org/2007/XMLSchema-versioning" elementFormDefault="qualified"
    vc:minVersion="1.1">

    <!-- ***** IMPORT/INCLUDE ***** -->
    
    <xs:import namespace="http://www.w3.org/XML/1998/namespace"
        schemaLocation="http://www.w3.org/2001/03/xml.xsd"/>
    <xs:import namespace="http://www.w3.org/2001/XMLSchema"
        schemaLocation="https://www.w3.org/2001/XMLSchema.xsd"/>
    <xs:import namespace="https://uwlib-cams.github.io/sinopia_maps/"
        schemaLocation="https://uwlib-cams.github.io/sinopia_maps/uwsinopia.xsd"/>
    
    <!--  ***** REUSE THESE TYPES IN OTHER NAMESPACES ***** -->
    
    <xs:simpleType name="prop_set_label_type">
        <!-- = uwl_sinopia_maps.xsd > prop_set_type -->
        <xs:restriction base="xs:string">
            <!-- (MAP ID component) -->
            <!-- [?] is it possible to put enumeration lists that will need updating, like this one, in an external doc and import here as vars, etc.? 
                See map_storage #5 -->
            <xs:enumeration value="rdacWork"/>
            <xs:enumeration value="rdacExpression"/>
            <xs:enumeration value="rdacManifestation"/>
            <xs:enumeration value="rdacItem"/>
        </xs:restriction>
    </xs:simpleType>
    
    <xs:simpleType name="resource_label_type">
        <xs:restriction base="xs:string">
            <!-- (MAP ID component) -->
            <!-- For prop sets from RDA Registry, mapid_prop_set and mapid_resource values will be redundant 
            (RDA Work property set properties for use in an RDA Work RT), 
            but this may not be the case for other vocabularies -->
            <xs:enumeration value="rdacWork"/>
            <xs:enumeration value="rdacExpression"/>
            <xs:enumeration value="rdacManifestation"/>
            <!-- enumeration below for testing -->
            <xs:enumeration value="testMultiplePropSets"/>
            <!-- Not yet in test storage instance
            <xs:enumeration value="rdacItem"/>
            <xs:enumeration value="rdacAgent"/>
            <xs:enumeration value=""/>
            -->
        </xs:restriction>
    </xs:simpleType>
    
    <xs:complexType name="lang_string_type">
        <!-- to do: need default "en" -->
        <!-- also to do confirm use of correct lang-tag set (is there a rule for XML?? see below) -->
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <!-- Use values from https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry  -->
                <xs:attribute ref="xml:lang" use="required"/>
                <!-- xsd: to do / wishlist / question: possible to add enumerations here?? -->
                <!-- en -->
                <!-- zxx -->
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>
    
    <xs:simpleType name="localid_attr">
        <xs:restriction base="xs:string">
            <!-- Possible to an XSD mechanism to prevent duplicate values? -->
            <!-- Possible to provide constraints *and* a default? See map_storage #6 -->
            <!-- A default in the case of localid_[...] attrs would allow users to enter a "placeholder" localid during source editing 
                and avoid validation errors; then unique localid values would be added with XSLT or Python after source editing -->
            <xs:pattern value="\S+"/>
        </xs:restriction>
    </xs:simpleType>
    
    <xs:complexType name="iri_type">
        <xs:attribute name="iri">
            <xs:simpleType>
                <xs:restriction base="xs:anyURI">
                    <!-- IRI validation pattern -->
                    <xs:pattern value="https?:\/\/\S*"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:complexType>
    
    <!-- ****** prop_set INSTANCE SCHEMA ****** -->

    <!-- **** prop_set **** -->
    <xs:element name="prop_set" type="prop_set_type"/>
    
    <xs:complexType name="prop_set_type">
        <xs:sequence>
            <xs:element name="prop_set_label" type="prop_set_label_type" minOccurs="1"
            maxOccurs="1"/>
            <xs:element name="prop" type="prop_type" minOccurs="1" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <!-- *** prop *** -->
    <xs:complexType name="prop_type">
        <xs:sequence>
            <xs:element name="prop_iri" type="iri_type" minOccurs="1" maxOccurs="1"/>
            <xs:element name="prop_label" type="lang_string_type" minOccurs="1"
                maxOccurs="unbounded"/>
            <xs:element name="prop_domain" type="iri_type" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element name="prop_range" type="iri_type" minOccurs="0" maxOccurs="unbounded"/>
            <!-- CONSIDER creating additional elements so that URLs can be stored for 1) output as ref links to appear in Sinopia UI and
                2) output as ref links with descriptive text to appear in HTML -->
            <xs:element name="prop_related_url" type="url_type" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element name="sinopia" type="uwsinopia:sinopia_type" minOccurs="0" maxOccurs="1"/>
        </xs:sequence>
        <xs:attribute name="localid_prop" type="localid_attr" use="required"/>
    </xs:complexType>

    <!-- BMR TO DO [!] This element needs work; attributes need better constraints -->
    <xs:complexType name="url_type">
        <xs:simpleContent>
            <!-- Need to improve constraints on URL values here; xs:anyURI alone not effective -->
            <xs:extension base="xs:anyURI">
                <xs:attribute name="url"/>
                <!-- Use values to differentiate 1) output as ref links to appear in Sinopia UI vs. 2) output as ref links with descriptive text to appear in HTML -->
                <!-- Need to enumerate link_category, one category should be remark URL -->
                <xs:attribute name="link_category"/>
                <!-- Maybe store link text as text child, not in @ -->
                <xs:attribute name="link_text"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>    

</xs:schema>
